services:
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    environment:
      - N8N_SECURE_COOKIE=${N8N_SECURE_COOKIE}
      - N8N_BASIC_AUTH_ACTIVE=${N8N_BASIC_AUTH_ACTIVE}
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
      - N8N_HOST=${N8N_HOST}
      - N8N_PORT=${N8N_PORT}
      - N8N_PROTOCOL=${N8N_PROTOCOL}
      - WEBHOOK_URL=${WEBHOOK_URL}
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}

      # DB de N8N
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=n8n-postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${N8N_DB_NAME}
      - DB_POSTGRESDB_USER=${N8N_DB_USER}
      - DB_POSTGRESDB_PASSWORD=${N8N_DB_PASSWORD}

    volumes:
      - n8n-data:/home/node/.n8n
    ports:
      - "5678:5678"
    depends_on:
      n8n-postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - example-network

# Traefik labels para reverse proxy (opcional)
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=example-network"
      - "traefik.http.routers.n8n.rule=Host(`${N8N_HOST}`)"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      - "traefik.http.routers.n8n.tls.certresolver=letsencrypt"

    n8n-postgres:
      image: postgres:16-alpine
      container_name: n8n-postgres
      environment:
        POSTGRES_USER: ${N8N_DB_USER}
        POSTGRES_PASSWORD: ${N8N_DB_PASSWORD}
        POSTGRES_DB: ${N8N_DB_NAME}
      volumes:
        - n8n-postgres-data:/var/lib/postgresql/data
      restart: unless-stopped
      networks:
        - example-network
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U ${N8N_DB_USER}"]
        interval: 10s
        timeout: 5s
        retries: 5

volumes:
    n8n-data:
    n8n-postgres-data:

networks:
  example-network:
    external: true